using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using CodeCasing;
using Microsoft.CodeAnalysis;

namespace Blazicons.Generating;

public static class GeneratorExecutionContextExtensions
{
    public static void WriteIconsClass(this GeneratorExecutionContext context, string className, string svgFolder)
    {
        var builder = new StringBuilder();

        builder.AppendLine("// <autogenerated/>");
        builder.AppendLine("namespace Blazicons;"); // Use Target Namespace

        builder.AppendLine($"public static class {className}");
        builder.AppendLine("{");

        var files = Directory.GetFiles(svgFolder, "*.svg");

        foreach (var file in files)
        {
            var svg = File.ReadAllText(Path.Combine(svgFolder, file));
            var svgString = ScrubSvg(svg);
            var viewBox = GetViewBox(svg);
            builder.Append($"public static SvgIcon {GetMemberName(file)} => SvgIcon.FromContent(\"{svgString}\"");
            if (!string.IsNullOrEmpty(viewBox))
            {
                builder.Append($", \"{viewBox}\"");
            }
            builder.AppendLine(");");
        }

        builder.AppendLine("}");
        context.AddSource($"{className}.g.cs", builder.ToString());
    }

    private static string? GetViewBox(string svg)
    {
        var regex = new Regex("<svg.*viewBox=\"([^\"]*)\"");
        var match = regex.Match(svg);
        if (match.Success)
        {
            return match.Groups[1].Value;
        }

        return null;
    }

    private static string ScrubSvg(string svg)
    {
        svg = Regex.Replace(svg, @"<\/?svg[^>]*>", string.Empty);
        svg = Regex.Replace(svg, @"<!--(.*?)-->", string.Empty);
        svg = svg.Replace("\n", string.Empty).Replace("\r", string.Empty);
        return svg.Replace("\\", "\\\\").Replace("\"", "\\\"");
    }

    private static string GetMemberName(string fileName)
    {
        var result = Path.GetFileNameWithoutExtension(fileName).ToPascalCase();
        switch (result[0])
        {
            case '1':
                result = $"One{result.Substring(1)}";
                break;

            case '2':
                result = $"Two{result.Substring(1)}";
                break;

            case '3':
                result = $"Three{result.Substring(1)}";
                break;

            case '4':
                result = $"Four{result.Substring(1)}";
                break;

            case '5':
                result = $"Five{result.Substring(1)}";
                break;

            case '6':
                result = $"Six{result.Substring(1)}";
                break;

            case '7':
                result = $"Seven{result.Substring(1)}";
                break;

            case '8':
                result = $"Eight{result.Substring(1)}";
                break;

            case '9':
                result = $"Nine{result.Substring(1)}";
                break;

            case '0':
                result = $"Zero{result.Substring(1)}";
                break;

            default:
                break;
        }

        return result;
    }
}